//`include "uvm_macros.svh"
class rv_xtn extends uvm_sequence_item;
 
  `uvm_object_utils(rv_xtn)
 
  
  
  bit [31:0] rv32i;
 // string instruction;
 // string type_;
  //bit valid;  
  //bit op_retire;
  //bit [31:0] rv_out;
  //bit rv_ack;
  
  //fields
 randc bit [6:0] opcode;
 randc bit [4:0] rd ; //bit [11:7] rd;
 randc bit [2:0] funct3; // bit [14:12] funct3;
 randc bit [4:0] rs1; //bit [19:15] rs1;
 randc bit [4:0] rs2; //bit [24:20] rs2;
 rand bit [6:0] funct7; //bit [31:25] funct7;
  bit [11:0] csr;
  rand bit [11:0] funct12;
  bit [31:0] imm;
 bit [31:0] r_type;
 bit [31:0] i_type;
 bit [31:0] s_type;
 bit [31:0] u_type;
 bit [31:0] b_type;
 bit [31:0] j_type;
  
  bit [31:0] instruction;
  
 
  
 
 
  //type_ = {r_type, i_type, s_type, };
 
  
  
  constraint opcode_c { opcode inside{7'b0110011, 7'b0000011, 7'b0010011,
                                      7'b0100011, 7'b0110111, 7'b1100011, 7'b1101111,
                                     7'b1100111, 7'b1110011, 7'b0001111};}
  
  
  constraint funct7_c { funct7 inside{7'b0, 7'b0100000};}
  constraint funct12_c { funct12 inside{11'b0, 11'b00000000001};}
  
  
  
  
  
  
  
 function void rt;
    
   R_Type:
    
   if(opcode == 7'b0110011)// checking for r_type
      
       begin//begin for opcode
         //`uvm_info("R_Type is detected", UVM_LOW)
         case(funct3)
           3'b000: 
             begin
               case(funct7)
                7'b0000000: begin
                 
                  `uvm_info("Opcode:","ADD", UVM_NONE)
                  
                end
                7'b0100000:begin 
                  
                  `uvm_info("Opcode:","SUB", UVM_NONE)
                end
                 default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
          
           3'b001: 
             begin
               case(funct7)
                 7'b0000000: `uvm_info("Opcode:","SLL:",UVM_NONE)
                 default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b010: 
             begin
               case(funct7)
                 7'b0000000:  `uvm_info("Opcode:","SLT:",UVM_NONE)
                default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b011: 
             begin
               case(funct7)
                 7'b0000000:  `uvm_info("Opcode:","SLTU:",UVM_NONE)
                default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b100: 
             begin
               case(funct7)
                 7'b0000000:  `uvm_info("Opcode:","XOR:",UVM_NONE)
                default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b101:
             begin
               case(funct7)
                 7'b0000000:  `uvm_info("Opcode:","SRL:",UVM_NONE)
                 7'b0100000:   `uvm_info("Opcode:","SRA:",UVM_NONE)
                default: `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b110:
             begin
               case(funct7)
                 7'b0000000:  `uvm_info("Opcode:","OR:",UVM_NONE)
                default:`uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
           3'b111:  
             begin
               case(funct7)
                 7'b0000000:   `uvm_info("Opcode:","AND:",UVM_NONE)
                default:  `uvm_info("Opcode:","failed to detect funct7",UVM_NONE)
              endcase
             end
          endcase
                   r_type = {funct7, rs2, rs1, funct3, rd, opcode};
                   instruction = r_type;
         //v_if.rv32i <= req.r_type;
                 `uvm_info("FORMAT:", $sformatf("r_type:%0b",r_type),UVM_NONE)
       end
    
 
I_Type:
    
    if(opcode == 7'b0000011)
      begin
        case(funct3)
          3'b000: `uvm_info("Opcode:","LB:",UVM_NONE)
          3'b001: `uvm_info("Opcode:","LH:",UVM_NONE)
          3'b010: `uvm_info("Opcode:","LW:",UVM_NONE)
          3'b100: `uvm_info("Opcode:","LBU:",UVM_NONE)
          3'b101: `uvm_info("Opcode:","LHU:",UVM_NONE)
            default: `uvm_info("Opcode:","failed to detect funct3",UVM_NONE)
          
        endcase
        i_type = {imm[11:0], rs1, funct3, rd, opcode};
          instruction = i_type;
        
          `uvm_info("FORMAT:", $sformatf("i_type:%0b",i_type),UVM_NONE)
      end
    
    if(opcode == 7'b0010011)
      begin
        case(funct3)
          3'b000:`uvm_info("Opcode:","ADDI:",UVM_NONE)
          3'b001: `uvm_info("Opcode:","SLLI:",UVM_NONE)
          3'b010: `uvm_info("Opcode:","SLTII:",UVM_NONE)
          3'b011:`uvm_info("Opcode:","SLITU:",UVM_NONE)
          3'b100:`uvm_info("Opcode:","XORI:",UVM_NONE)
          3'b101:
            begin
              case(imm[11:5])
                7'b0000000: `uvm_info("Opcode:","SRLI:",UVM_NONE)
                7'b0100000: `uvm_info("Opcode:","SRAI:",UVM_NONE)
                  default:`uvm_info("Opcode:","Type not supported",UVM_NONE)
              endcase
            end
          3'b110: `uvm_info("Opcode:","ORI:",UVM_NONE)
          3'b111: `uvm_info("Opcode:","ANDI:",UVM_NONE)
          
          default: `uvm_info("Opcode:","Failed to detect funct3:",UVM_NONE)
          
        endcase
        begin
          if(!(funct3 == 3'b001 | funct3 == 3'b101))
            
          i_type = {imm[11:0], rs1, funct3, rd, opcode};
          else
            i_type = {imm[11:5], imm[4:0], rs1, funct3, rd, opcode};
        end
                /*
         begin
           if(rs1[4]==1'b1)
             
               imm[11:0] = 12'b111111111111;
           else
             imm[11:0] = 12'b0;
             end
                */
          instruction = i_type;
        `uvm_info("FORMAT:", $sformatf("i_type:%0b",i_type),UVM_NONE)
      end
    
    if(opcode == 7'b1100111)
      begin
        `uvm_info("Opcode:","JALR:",UVM_NONE)
        i_type = {imm[11:0], rs1, funct3, rd, opcode};
        instruction = i_type;
        `uvm_info("FORMAT:", $sformatf("i_type:%0b", i_type),UVM_NONE)
      end
    
S_Type: 
    
    if(opcode == 7'b0100011)
      begin
        case(funct3)
          3'b000: `uvm_info("Opcode:","SB:",UVM_NONE)
            3'b001: `uvm_info("Opcode:","SH:",UVM_NONE)
            3'b010:`uvm_info("Opcode:","SW:",UVM_NONE)
            default:`uvm_info("Opcode:","Failed to detect funct3",UVM_NONE)
          
        endcase
        s_type = {imm[11:5],rs2, rs1, funct3, imm[4:0], opcode};
        instruction = s_type;
          `uvm_info("FORMAT:", $sformatf("s_type:%0b", s_type),UVM_NONE)
      end
    
    
U_Type:
    
    if(opcode == 7'b0110111)
      begin
        `uvm_info("Opcode:","LUI:",UVM_NONE)
        u_type = {imm[31:12], rd, opcode};
        instruction = u_type;
        `uvm_info("FORMAT:", $sformatf("u_type:%0b", u_type),UVM_NONE)
      end
    
    if(opcode == 7'b0010111)
      begin
        `uvm_info("Opcode:","AUIPC:",UVM_NONE)
        u_type = {imm[31:12], rd, opcode};
        instruction = u_type;
        `uvm_info("FORMAT:", $sformatf("u_type:%0b", u_type),UVM_NONE)
      end
    
    
B_Type:
    
    if(opcode==7'b1100011)
      begin
        case(funct3)
          3'b000:begin
            if(rs2==rs1)
              `uvm_info("Opcode:","BEQ:",UVM_NONE)
            else
              `uvm_info("Opcode:","rs2 not equal to rs1",UVM_NONE)
          end
          3'b001: 
          begin
            if(rs2!=rs1)
              `uvm_info("Opcode:","BNE:",UVM_NONE)
            else
               `uvm_info("Opcode:","rs2 equal to rs1",UVM_NONE)
          end
          3'b100: 
            begin
              if(rs1<rs2)
                `uvm_info("Opcode:","BLT:",UVM_NONE)
            else
              `uvm_info("Opcode:","rs1 less than rs2",UVM_NONE)
          end
          3'b101: 
          begin
            if(rs1>=rs2)
              `uvm_info("Opcode:","BGE:",UVM_NONE)
            else
              `uvm_info("Opcode:","rs1 greater than or equal to rs2",UVM_NONE)
          end
          3'b110: `uvm_info("Opcode:","BLTU:",UVM_NONE)
          3'b111: `uvm_info("Opcode:","BGEU:",UVM_NONE)
              default:  `uvm_info("Opcode:","Failed to detect funct3",UVM_NONE)
        endcase
        b_type = {imm[12], imm[10:5], rs2, rs1, funct3, imm[4:1], imm[11], opcode};
         instruction = b_type;
            `uvm_info("FORMAT:", $sformatf("b_type:%0b", b_type),UVM_NONE)
      end
    
    
J_Type:
    
    if(opcode == 7'b1101111)
      begin
        `uvm_info("Opcode:","JAL",UVM_NONE)
        j_type = {imm[20], imm[10:1], imm[11], imm[19:12], rd, opcode};
        instruction = j_type;
        `uvm_info("FORMAT:", $sformatf("j_type:%0b", j_type),UVM_NONE)
      end
    
    
CSR:   
    

    if(opcode == 7'b1110011)
      begin
        case(funct3)
          3'b001: `uvm_info("Opcode:","CSRRW",UVM_NONE)
          3'b010: `uvm_info("Opcode:","CSRRS",UVM_NONE)
          3'b011: `uvm_info("Opcode:","CSRRC",UVM_NONE)
          3'b101: `uvm_info("Opcode:","CSRRWI",UVM_NONE)
          3'b110: `uvm_info("Opcode:","CSRRSI",UVM_NONE)
          3'b111: `uvm_info("Opcode:","CSRRCI",UVM_NONE)
            default: `uvm_info("Opcode:","Failed to detect funct3",UVM_NONE)
          
        endcase
       
        
        i_type = {csr, rs1, funct3, rd, opcode};
       instruction = i_type;
          `uvm_info("FORMAT:", $sformatf("csr:%0b", i_type),UVM_NONE)
      end       
    
    
ECALL_EBREAK:
    
    if(opcode == 7'b1110011)
      begin
        case(funct3)
          3'b000:
            begin
              if(!funct12)
                begin
                  `uvm_info("Opcode:","ECALL",UVM_NONE)
                end
              else if(funct12==12'b00000000001)
                begin
                  `uvm_info("Opcode:","EBREAK",UVM_NONE)
                end
              else
                begin
                  `uvm_info("Opcode:","Failed to detect funct12",UVM_NONE)
                end
            end
          
          default: `uvm_info("Opcode:","Failed to detect funct3",UVM_NONE)
         endcase
              
        i_type = {funct12, rs1, funct3, rd, opcode};
         instruction = i_type;
        `uvm_info("FORMAT:", $sformatf("enviroment:%0b",i_type),UVM_NONE)
      end       
    
    
    
 endfunction
 
 
 
  extern function new(string name="rv_xtn");
  extern function void do_print(uvm_printer printer);
    
    
 endclass
    
    function rv_xtn::new(string name="rv_xtn");
      super.new(name);
    
    endfunction
    
 
    function void rv_xtn::do_print(uvm_printer printer);
	super.do_print(printer);
	 
      
      rt;
      
      printer.print_field("rv32i", this.rv32i,32,UVM_BIN);	
     // printer.print_field("instruction",this.instruction,32,UVM_STRING);
     // printer.print_field("type_", this.type_,32,UVM_STRING);
   /*   printer.print_field("valid",this.valid,1,UVM_DEC);
      printer.print_field("rv_ack",this.rv_ack,1,UVM_DEC);
      printer.print_field("op_retire",this.op_retire,1,UVM_DEC);
      printer.print_field("rv_out",this.rv_out,32,UVM_DEC);
      printer.print_field("r_type",this.r_type,32,UVM_HEX);
      
    */  
      //print for fields
      
      printer.print_field("funct7",this.funct7,7,UVM_BIN);
      printer.print_field("rs2",this.rs2,5,UVM_BIN);
      printer.print_field("rs1",this.rs1,5,UVM_BIN);
      printer.print_field("funct3",this.funct3,3,UVM_BIN);
      printer.print_field("rd",this.rd,5,UVM_BIN);
      printer.print_field("opcode",this.opcode,7,UVM_BIN);
    
      
endfunction
    
 